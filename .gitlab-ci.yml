default:
  tags:
    - docker
stages:
  - build
  - test
  - make_release

workflow:
  rules: 
    - if: '$CI_COMMIT_BRANCH != "main" &&  $CI_COMMIT_TAG != "null" && $CI_COMMIT_MESSAGE !~ /adding version/'
      when: always

build:
  stage: build
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  rules: 
    - if: '$CI_COMMIT_MESSAGE !~ /no_build/'

make_release:
  stage: make_release
  image: $CI_REGISTRY_IMAGE:latest
  script:
    - mkdir ../release || true
    - cd ../release
    - rm -rf *
    - git clone http://oauth2:${vince_bot_pat}@${CI_SERVER_FQDN}/${CI_PROJECT_PATH}.git
    - git config --global user.email "vincebot@vince.com"
    - git config --global user.name "Vince bot"
    - cd $CI_PROJECT_NAME
    - cat version.txt
    - git switch ${CI_COMMIT_BRANCH}
    - current_tag=$(git for-each-ref --sort=creatordate --format '%(refname)' refs/tags | tail -1)
    - current_minor_version=$(echo $current_tag | cut -d"." -f3)
    - current_base_version=$(echo $current_tag | cut -d"." -f1,2)
    - new_minor_version=$((current_minor_version + 1))
    - new_version="${current_base_version}.${new_minor_version}"
    - echo $new_version > version.txt
    - git add .
    - git commit -m "${CI_COMMIT_MESSAGE} adding version ${new_version}"
    - git push -f origin ${CI_COMMIT_BRANCH}
    - git switch main
    - git pull origin main
    - git merge ${CI_COMMIT_BRANCH}
    - git push origin main
    - git tag -f $new_version
    - git push origin $new_version
    - git branch -D ${CI_COMMIT_BRANCH} || true

