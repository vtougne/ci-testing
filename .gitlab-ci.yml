default:
  tags:
    - docker
stages:
  - build
  - prepare_env
  - test
  - make_release
  - deploy

workflow:
  rules: 
    - if: '$CI_COMMIT_BRANCH != "main" &&  $CI_COMMIT_TAG != "null" && $CI_COMMIT_MESSAGE !~ /adding version/'
      when: always

build:
  stage: build
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    # SECURE_FILES_DOWNLOAD_PATH: '/root/.ssh'
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

    # - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    # - cd $HOME/.ssh
    # - ls -lrta
    # - ls -lrta  /root/.ssh/vince_bot_ssh.priv
  rules: 
    - if: '$CI_COMMIT_MESSAGE =~ /build_image/'


prepare_env:
  stage: prepare_env
  image: $CI_REGISTRY_IMAGE:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: 'keys'
  script:
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - mkdir -p /root/.ssh
    - cp -p /builds/root/ci-testing/keys/vince_bot_ssh.priv /root/.ssh/id_rsa
    - cp -p /builds/root/ci-testing/keys/vince_bot_ssh.pub /root/.ssh/id_rsa.pub
    - chmod 600 /root/.ssh/id_rsa
    - chmod 644 /root/.ssh/id_rsa.pub
    - ssh-keyscan github.com >> /root/.ssh/known_hosts
    - sleep 2000
    # - cd /root/.ssh
    # - ls -lrta /builds/root/ci-testing/root/.ssh
    # - ls -lrta  /root/.ssh/vince_bot_ssh.priv

  rules: 
    - if: '$CI_COMMIT_MESSAGE =~ /build_image/'


make_release:
  stage: make_release
  image: $CI_REGISTRY_IMAGE:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: '.ssh'
  script:
    - mkdir ../release || true
    - cd ../release
    - rm -rf *
    - git clone http://oauth2:${vince_bot_pat}@${CI_SERVER_FQDN}/${CI_PROJECT_PATH}.git
    - git config --global user.email "vincebot@vince.com"
    - git config --global user.name "Vince bot"
    - cd $CI_PROJECT_NAME
    - cat version.txt
    - git switch ${CI_COMMIT_BRANCH}
    - current_tag=$(git for-each-ref --sort=creatordate --format '%(refname)' refs/tags | tail -1 | cut -d"/" -f3)
    - current_minor_version=$(echo $current_tag | cut -d"." -f3)
    - current_base_version=$(echo $current_tag | cut -d"." -f1,2)
    - new_minor_version=$((current_minor_version + 1))
    - new_version="${current_base_version}.${new_minor_version}"
    - echo $new_version > version.txt
    - git add .
    - git commit -m "${CI_COMMIT_MESSAGE} adding version ${new_version}"
    - git push -f origin ${CI_COMMIT_BRANCH}
    - git switch main
    - git pull origin main
    - git merge ${CI_COMMIT_BRANCH}
    - git push origin main
    - git tag -f $new_version
    - git push origin $new_version
    # - git push -d origin ${CI_COMMIT_BRANCH}


deploy:
  stage: deploy
  image: $CI_REGISTRY_IMAGE:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: '.ssh'
  script:
    - cd ../release/$CI_PROJECT_NAME
    - new_version=$(cat version.txt)
    - echo $new_version
    - git remote set-url origin git@github.com:vtougne/ci-testing.git
    - git push origin $new_version
    - git push -f origin main